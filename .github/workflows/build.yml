name: Build Executables

on:
  push:
    branches:
      - release

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.6'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        COMMON_OPTIONS="--windowed --noconfirm --clean \
            --exclude-module PyQt6.QtWebEngineCore \
            --exclude-module PyQt6.Qt3DCore \
            --exclude-module PyQt6.QtNetwork \
            --exclude-module PyQt6.QtHelp \
            --exclude-module PyQt6.QtPrintSupport \
            --exclude-module PyQt6.QtSensors \
            --exclude-module PyQt6.QtTest \
            --exclude-module PyQt6.QtSvg \
            --exclude-module PyQt6.QtXml --exclude-module PyQt6.QtXmlPatterns \
            --exclude-module PyQt6.QtPositioning \
            --exclude-module tkinter \
            --exclude-module matplotlib.tests --exclude-module mpl_toolkits.tests \
            --exclude-module scipy.spatial --exclude-module scipy.special --exclude-module scipy.stats \
            --exclude-module pandas.tests --exclude-module numpy.testing \
            --exclude-module IPython --exclude-module jupyter"

        if [[ "${{ matrix.os }}" == "macos-latest" ]]
        then
          pyinstaller ${COMMON_OPTIONS} --onedir --icon resources/palms.icns PALMS.py
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]
        then
          pyinstaller ${COMMON_OPTIONS} --onefile --icon resources/palms.ico PALMS.py
        else
          pyinstaller ${COMMON_OPTIONS} --onefile --icon resources/palms.png PALMS.py
        fi
      shell: bash

    - name: Prepare release directory
      run: mkdir -p release

    - name: Archive Linux executable
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        chmod +x dist/PALMS
        tar -czf release_linux.tar.gz Experiments -C dist PALMS

    - name: Archive Windows executable
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        tar -czf release_windows.tar.gz Experiments -C dist PALMS.exe

    - name: Archive MacOS executable
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        tar -czf release_macos.tar.gz Experiments -C dist ./

    - name: Commit 'latest' rag.
      if: github.ref == 'refs/heads/release'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -f latest
        git push origin latest --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload all release files as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-release
        path: release_*

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest
        files: release_*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux Artifacts
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-latest-release
        path: release/

    - name: Download Windows Artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-latest-release
        path: release/

    - name: Download MacOS Artifacts
      uses: actions/download-artifact@v3
      with:
        name: macos-latest-release
        path: release/

    - name: Compress and upload the code to release
      run: |
        tar -czf release/PALMS.tar.gz *.py LICENSE README.md NOTICE requirements.txt

    - name: Move the source to their own release
      run: |
        mkdir src/
        cp -r *.py LICENSE README.md NOTICE requirements.txt src/

    - name: Add licence and readme to release
      run: |
        cp LICENSE README.md NOTICE release/

    - name: Upload compressed release to Google Drive
      uses: adityak74/google-drive-upload-git-action@main
      with:
        credentials: ${{ secrets.GDRIVE_CREDENTIALS }}
        filename: "release/*"
        folderId: "1QjG6dqdkbLWsDiG5VYiDQLlOj_v-N6ia"
        overwrite: "true"

    - name: Upload uncompressed release to Google Drive
      uses: adityak74/google-drive-upload-git-action@main
      with:
        credentials: ${{ secrets.GDRIVE_CREDENTIALS }}
        filename: "src/*"
        folderId: "1iKHk-qoPL-LnKDJsgHDRbxpnRMdQ4UT_"
        overwrite: "true"
